@using ViewsResources

@{
    ViewBag.Title = Resources.SignUp;
    Layout = "~/Views/Account/_Layout.cshtml";
}
<section class="view-module sign-up">
    <div class="user-columns">
        <div class="user-title-container">
            <div class="user-title">@Resources.CreateAccountTitle</div>
        </div>
        <div class="user-form">
            <form id="signUpForm" data-bind="focusHandler: {}" action="#" method="post">
                <div class="user-column">
                    <div class="user-form-row-combiner">
                        <div class="user-form-row pull-left" data-bind="css: { error: isFirstNameErrorVisible(), success: !isFirstNameErrorVisible() && firstName.isValid() }">
                            <div class="user-form-input-holder">
                                <span class="user-form-input-wrapper"></span>
                                <input tabindex="1" class="user-form-input" type="text" placeholder="@Resources.FirstNameCaption" name="firstName" data-bind="value: firstName, valueUpdate: 'afterkeydown', event: { blur: validateFirstName, focus: onFocusFirstName }" ondrop="return false;" />
                            </div>
                            <span class="user-form-message first-name-error-message" data-bind="visible: isFirstNameErrorVisible()">@Resources.EnterValidFirstName</span>
                        </div>
                        <div class="user-form-row pull-right" data-bind="css: { error: isLastNameErrorVisible(), success: !isLastNameErrorVisible() && lastName.isValid() }">
                            <div class="user-form-input-holder">
                                <span class="user-form-input-wrapper"></span>
                                <input tabindex="1" class="user-form-input" type="text" placeholder="@Resources.LastNameCaption" name="lastName" data-bind="value: lastName, valueUpdate: 'afterkeydown', event: { blur: validateLastName, focus: onFocusLastName }" ondrop="return false;" />
                            </div>
                            <span class="user-form-message last-name-error-message" data-bind="visible: isLastNameErrorVisible()">@Resources.EnterValidLastName</span>
                        </div>
                        <div class="clearfix"></div>
                    </div>
                    <div class="user-form-row" data-bind="css: { error: !isUserNameValidating() && !userName.isValid() && userName().length > 0 && (!isUserNameEditing() || userPreciselyExists()), success: !isUserNameValidating() && !isUserNameEditing() && userName.isValid() }">
                        <div class="user-form-input-holder email">
                            <span class="user-form-input-wrapper"></span>
                            <input tabindex="2" class="user-form-input" type="email" name="email" autocomplete="off" placeholder="@Resources.EmailCaption" data-bind="value: userName, valueUpdate: 'afterkeydown', event: { blur: checkUserExists }, hasFocus: isUserNameEditing" ondrop="return false;" />
                        </div>
                        <span class="form-validation-message" data-bind="visible: isUserNameValidating()">@Resources.Checking</span>
                        <span class="user-form-message email-error-message" data-bind="visible: !isUserNameValidating() && !userName.isValid() && userName().length > 0 && (!isUserNameEditing() || userPreciselyExists()), text: userExists() ? '@Resources.AccountAlreadyExists' : '@Resources.EnterValidEmailMessage' "></span>
                    </div>
                    <div class="user-form-row" data-bind="css: { error: !password.isValid() && password().length > 0, success: password.isValid() }">
                        <div class="user-form-input-holder password">
                            <span class="user-form-input-wrapper"></span>
                            <input tabindex="3" class="user-form-input" name="password" placeholder="@Resources.PasswordCaption" autocomplete="off" data-bind="attr: { type: isPasswordVisible() ? 'text' : 'password' }, value: password, valueUpdate: 'afterkeydown', hasFocus: isPasswordEditing" ondrop="return false;" />
                            <div class="user-form-checkbox-holder password clearfix" data-bind="attr: { title: isPasswordVisible() ? '@Resources.HidePassword' : '@Resources.ShowPassword' } ">
                                <div class="user-form-checkbox password" data-bind="css: { checked: isPasswordVisible }">
                                    <input id="show-hide-password-checkbox" class="custom-checkbox" type="checkbox" data-bind="checked: isPasswordVisible" />
                                </div>
                                <div class="user-form-checkbox-label password">
                                    <label for="show-hide-password-checkbox">@Resources.Show</label>
                                </div>
                            </div>
                        </div>
                        <ul class="password-requirements unstyled">
                            <li class="password-requirements-item">
                                <span class="password-requirements-item-text">@Resources.PleaseUse</span>
                            </li>
                            <li class="password-requirements-item">
                                <span class="password-requirements-item-text requirement password-symbols-requirement" data-bind="css: { success: password.hasMoreThanSevenSymbols }">@Resources.NotLessThanSevenSymbols</span>
                            </li>
                            <li class="password-requirements-item">
                                <span class="password-requirements-item-text requirement password-spaces-requirement" data-bind="css: { success: password.hasSpaces }">@Resources.NoSpaces</span>
                            </li>
                        </ul>
                    </div>
                </div>
                @Html.Partial("Captcha")
                <div class="user-form-row submit">
                    <div class="formBtn">
                        <button class="orange btn user-form-btn" type="submit" data-bind="css: { disabled: !isFormValid() || isSignupRequestPending() }, enable: isFormValid() && !isSignupRequestPending(), click: signUp">
                            <img class="preloader" src="/Content/images/account/signup-preloader.gif" data-bind="visible: isSignupRequestPending" />
                            <span class="title">@Resources.SignUpButton</span>
                        </button>
                    </div>
                    <div class="user-form-license-caption">
                        @Html.Raw(String.Format(Resources.LicenseAgreeCaption, Url.Action("TermsOfUse", "Account"), Url.Action("PrivacyPolicy", "Account")))
                    </div>
                </div>
            </form>
        </div>
    </div>

</section>
