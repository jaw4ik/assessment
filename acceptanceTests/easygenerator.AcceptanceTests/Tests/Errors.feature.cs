// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace easygenerator.AcceptanceTests.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Errors")]
    [NUnit.Framework.CategoryAttribute("Errors")]
    public partial class ErrorsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Errors.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Errors", "Erorrs 400 and 404 should be processed", ProgrammingLanguage.CSharp, new string[] {
                        "Errors"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Correct error pages should be opened for")]
        [NUnit.Framework.TestCaseAttribute("Home page bad request", "http://localhost:5656/#/bla", "http://localhost:5656/#/", "Bad request", null)]
        [NUnit.Framework.TestCaseAttribute("Objective bad request", "http://localhost:5656/#/objective/asd", "http://localhost:5656/#/403", "Bad request", null)]
        [NUnit.Framework.TestCaseAttribute("Objective not found", "http://localhost:5656/#/objective/1000", "http://localhost:5656/#/404", "Not found", null)]
        [NUnit.Framework.TestCaseAttribute("Publication bad request", "http://localhost:5656/#/publications/asd", "http://localhost:5656/#/403", "Bad request", null)]
        [NUnit.Framework.TestCaseAttribute("Publication not found", "http://localhost:5656/#/publications/1000", "http://localhost:5656/#/404", "Not found", null)]
        [NUnit.Framework.TestCaseAttribute("Question bad request", "http://localhost:5656/#/objective/0/question/aad", "http://localhost:5656/#/403", "Bad request", null)]
        [NUnit.Framework.TestCaseAttribute("Question not found", "http://localhost:5656/#/objective/0/question/1000", "http://localhost:5656/#/404", "Not found", null)]
        [NUnit.Framework.TestCaseAttribute("Answer bad request", "http://localhost:5656/#/objective/0/question/0/answer/asd", "http://localhost:5656/#/403", "Bad request", null)]
        [NUnit.Framework.TestCaseAttribute("Answer not found", "http://localhost:5656/#/objective/0/question/0/answer/1000", "http://localhost:5656/#/404", "Not found", null)]
        public virtual void CorrectErrorPagesShouldBeOpenedFor(string testName, string url, string expectedUrl, string pageText, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Correct error pages should be opened for", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.When(string.Format("open page by url \'{0}\'", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
testRunner.Then(string.Format("browser navigates to url \'{0}\'", expectedUrl), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
testRunner.And(string.Format("page contains element with text \'{0}\'", pageText), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
