// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace easygenerator.AcceptanceTests.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CUDQuestion")]
    [NUnit.Framework.CategoryAttribute("CUDQuestion")]
    public partial class CUDQuestionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CUDQuestion.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CUDQuestion", @"As an author I can define(create new/ update existing/ delete existing) Questions
that a learner has to be able to answer correctly
in order to prove that he has reached specific Learning Objective
 or system could decide if a learner needs to go through more Explanations.", ProgrammingLanguage.CSharp, new string[] {
                        "CUDQuestion"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line 9
testRunner.Given("clear data context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add question action on objective page navigates to created question view")]
        public virtual void AddQuestionActionOnObjectivePageNavigatesToCreatedQuestionView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add question action on objective page navigates to created question view", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table1.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 17
testRunner.Given("objectives are present in database", ((string)(null)), table1, "Given ");
#line 21
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
testRunner.And("press add new question button on objective page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
testRunner.Then("browser navigates to url that contains \'http://localhost:5656/#objective/00000000" +
                    "000000000000000000000001/question/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit question title text block is active when open created question")]
        public virtual void EditQuestionTitleTextBlockIsActiveWhenOpenCreatedQuestion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit question title text block is active when open created question", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table2.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 50
testRunner.Given("objectives are present in database", ((string)(null)), table2, "Given ");
#line 54
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
testRunner.And("press add new question button on objective page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
testRunner.Then("browser navigates to url that contains \'http://localhost:5656/#objective/00000000" +
                    "000000000000000000000001/question/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
testRunner.And("edit title text block is active on question page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit question title text block contains default text when open created question")]
        public virtual void EditQuestionTitleTextBlockContainsDefaultTextWhenOpenCreatedQuestion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit question title text block contains default text when open created question", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table3.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 60
testRunner.Given("objectives are present in database", ((string)(null)), table3, "Given ");
#line 64
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
testRunner.And("press add new question button on objective page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
testRunner.Then("browser navigates to url that contains \'http://localhost:5656/#objective/00000000" +
                    "000000000000000000000001/question/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
testRunner.And("\'What question do you want to ask?\' title is shown in question page header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Max allowed chars count is shown in edit title text block on created question fro" +
            "m the beginning")]
        public virtual void MaxAllowedCharsCountIsShownInEditTitleTextBlockOnCreatedQuestionFromTheBeginning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Max allowed chars count is shown in edit title text block on created question fro" +
                    "m the beginning", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table4.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 101
testRunner.Given("objectives are present in database", ((string)(null)), table4, "Given ");
#line 105
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
testRunner.And("press add new question button on objective page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
testRunner.Then("browser navigates to url that contains \'http://localhost:5656/#objective/00000000" +
                    "000000000000000000000001/question/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
testRunner.And("max chars count \'255\' is shown in chars counter in question title field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("correct input chars count and max chars count are shown in edit title text block " +
            "on question page")]
        public virtual void CorrectInputCharsCountAndMaxCharsCountAreShownInEditTitleTextBlockOnQuestionPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("correct input chars count and max chars count are shown in edit title text block " +
                    "on question page", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table5.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 111
testRunner.Given("objectives are present in database", ((string)(null)), table5, "Given ");
#line 115
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
testRunner.And("press add new question button on objective page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
testRunner.Then("browser navigates to url that contains \'http://localhost:5656/#objective/00000000" +
                    "000000000000000000000001/question/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 118
testRunner.When("edit question title with new text \'abcd\' on question page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
testRunner.Then("chars count \'4\' is shown in chars counter in question title field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 120
testRunner.And("max chars count \'255\' is shown in chars counter in question title field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Not possible to save more than 255 charracters in title text on question page")]
        public virtual void NotPossibleToSaveMoreThan255CharractersInTitleTextOnQuestionPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Not possible to save more than 255 charracters in title text on question page", ((string[])(null)));
#line 122
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table6.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 123
testRunner.Given("objectives are present in database", ((string)(null)), table6, "Given ");
#line 127
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
testRunner.And("press add new question button on objective page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
testRunner.Then("browser navigates to url that contains \'http://localhost:5656/#objective/00000000" +
                    "000000000000000000000001/question/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 130
testRunner.When(@"edit question title with new text 'WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW W WW WWW' on question page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
testRunner.Then("chars count \'256\' is shown in chars counter in question title field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 132
testRunner.And("title text block marked with error on question page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
testRunner.And("chars counter marked with error on question page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Special symbols could be entered into title edit area on create view and saved")]
        public virtual void SpecialSymbolsCouldBeEnteredIntoTitleEditAreaOnCreateViewAndSaved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Special symbols could be entered into title edit area on create view and saved", ((string[])(null)));
#line 217
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table7.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 218
testRunner.Given("objectives are present in database", ((string)(null)), table7, "Given ");
#line 221
testRunner.When("refresh page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 222
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01/question/create\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
testRunner.And("input \'~`!@#$%^&*()_+-={[]}:;\"\'|\\<,.>/?\' into title edit area on create view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
testRunner.And("click on create and edit button on create view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
testRunner.Then("browser navigates to url that contains \'http://localhost:5656/#objective/00000000" +
                    "000000000000000000000001/question/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 226
testRunner.And("\'~`!@#$%^&*()_+-={[]}:;\"\'|\\<,.>/?\' title is shown in question page header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("It is possible to edit question title on question page")]
        public virtual void ItIsPossibleToEditQuestionTitleOnQuestionPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It is possible to edit question title on question page", ((string[])(null)));
#line 228
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table8.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 229
testRunner.Given("objectives are present in database", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table9.AddRow(new string[] {
                        "Question1",
                        "00000000000000000000000000000001"});
#line 232
testRunner.Given("questions related to \'Objective1\' are present in database", ((string)(null)), table9, "Given ");
#line 235
testRunner.When("refresh page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 236
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01/question/00000000000000000000000000000001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
testRunner.And("edit question title with new text \'Question2\' on question page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
testRunner.And("click on collapse answer options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
testRunner.And("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table10.AddRow(new string[] {
                        "Question2"});
#line 240
testRunner.Then("questions list contains only items with data", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Not possible to make existing question title empty")]
        public virtual void NotPossibleToMakeExistingQuestionTitleEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Not possible to make existing question title empty", ((string[])(null)));
#line 244
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table11.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 245
testRunner.Given("objectives are present in database", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table12.AddRow(new string[] {
                        "Question1",
                        "00000000000000000000000000000001"});
#line 248
testRunner.Given("questions related to \'Objective1\' are present in database", ((string)(null)), table12, "Given ");
#line 251
testRunner.When("refresh page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 252
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01/question/00000000000000000000000000000001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 253
testRunner.And("clear header title text field on question page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
testRunner.Then("title text block marked with error on question page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 255
testRunner.And("chars counter marked with error on question page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
testRunner.When("click on collapse answer options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 257
testRunner.And("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table13.AddRow(new string[] {
                        "Question1"});
#line 258
testRunner.Then("questions list contains only items with data", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete question button becomes available after question was selected")]
        public virtual void DeleteQuestionButtonBecomesAvailableAfterQuestionWasSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete question button becomes available after question was selected", ((string[])(null)));
#line 262
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table14.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 263
testRunner.Given("objectives are present in database", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table15.AddRow(new string[] {
                        "Question1",
                        "00000000000000000000000000000001"});
            table15.AddRow(new string[] {
                        "Question2",
                        "00000000000000000000000000000002"});
#line 266
testRunner.Given("questions related to \'Objective1\' are present in database", ((string)(null)), table15, "Given ");
#line 270
testRunner.When("refresh page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 271
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 272
testRunner.And("mouse hover element of questions list with title \'Question2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
testRunner.And("click on select questions list item with title \'Question2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
testRunner.Then("delete button is displayed true on question list page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete question button is not available if there is no selected questions")]
        public virtual void DeleteQuestionButtonIsNotAvailableIfThereIsNoSelectedQuestions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete question button is not available if there is no selected questions", ((string[])(null)));
#line 276
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table16.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 277
testRunner.Given("objectives are present in database", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table17.AddRow(new string[] {
                        "Question1",
                        "00000000000000000000000000000001"});
            table17.AddRow(new string[] {
                        "Question2",
                        "00000000000000000000000000000002"});
#line 280
testRunner.Given("questions related to \'Objective1\' are present in database", ((string)(null)), table17, "Given ");
#line 284
testRunner.When("refresh page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 285
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 286
testRunner.Then("delete button is displayed false on question list page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 287
testRunner.When("mouse hover element of questions list with title \'Question2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 288
testRunner.And("click on select questions list item with title \'Question2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
testRunner.And("click on select questions list item with title \'Question2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
testRunner.Then("delete button is displayed false on question list page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Selected question can be deleted")]
        public virtual void SelectedQuestionCanBeDeleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selected question can be deleted", ((string[])(null)));
#line 292
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table18.AddRow(new string[] {
                        "Objective1",
                        "00000000000000000000000000000001"});
#line 293
testRunner.Given("objectives are present in database", ((string)(null)), table18, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table19.AddRow(new string[] {
                        "Question1",
                        "00000000000000000000000000000001"});
            table19.AddRow(new string[] {
                        "Question2",
                        "00000000000000000000000000000002"});
            table19.AddRow(new string[] {
                        "Question3",
                        "00000000000000000000000000000003"});
#line 296
testRunner.Given("questions related to \'Objective1\' are present in database", ((string)(null)), table19, "Given ");
#line 301
testRunner.When("refresh page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 302
testRunner.When("open page by url \'http://localhost:5656/#objective/000000000000000000000000000000" +
                    "01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 303
testRunner.And("mouse hover element of questions list with title \'Question2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
testRunner.And("click on select questions list item with title \'Question2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
testRunner.And("click on delete button on question list page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 306
testRunner.Then("page does not contain element with text \'Question2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 307
testRunner.When("refresh page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table20.AddRow(new string[] {
                        "Question1"});
            table20.AddRow(new string[] {
                        "Question3"});
#line 308
testRunner.Then("questions list contains only items with data", ((string)(null)), table20, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
