// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace easygenerator.AcceptanceTests.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Experience")]
    [NUnit.Framework.CategoryAttribute("Experience")]
    public partial class ExperienceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Experience.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Experience", "As an author I can see Title, list of related objectives and assigned Template na" +
                    "me  of open Experience,\r\nso I can check if the current experience is ready for p" +
                    "ublishing.", ProgrammingLanguage.CSharp, new string[] {
                        "Experience"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("clear data context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table1.AddRow(new string[] {
                        "Experience1",
                        "00000000000000000000000000000001"});
            table1.AddRow(new string[] {
                        "Experience2",
                        "00000000000000000000000000000002"});
            table1.AddRow(new string[] {
                        "Experience3",
                        "00000000000000000000000000000003"});
#line 8
testRunner.Given("publications are present in database", ((string)(null)), table1, "Given ");
#line 13
testRunner.When("open page by url \'http://localhost:5656/signin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
testRunner.And("sign in as \'test\' user on sign in page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
testRunner.Then("browser navigates to url \'http://localhost:5656/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Experience title is shown in experiance page header")]
        public virtual void ExperienceTitleIsShownInExperiancePageHeader()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Experience title is shown in experiance page header", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 18
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
testRunner.Then("\'Experience2\' title is shown in experience page header", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All related objectives should be present in list")]
        public virtual void AllRelatedObjectivesShouldBePresentInList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All related objectives should be present in list", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table2.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table2.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
            table2.AddRow(new string[] {
                        "Objective21",
                        "00000000000000000000000000000003"});
            table2.AddRow(new string[] {
                        "Objective22",
                        "00000000000000000000000000000004"});
#line 22
testRunner.Given("objectives are present in database", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table3.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table3.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
#line 28
testRunner.Given("objectives are linked to experiance \'Experience1\'", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table4.AddRow(new string[] {
                        "Objective21",
                        "00000000000000000000000000000003"});
            table4.AddRow(new string[] {
                        "Objective22",
                        "00000000000000000000000000000004"});
#line 32
testRunner.Given("objectives are linked to experiance \'Experience2\'", ((string)(null)), table4, "Given ");
#line 36
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table5.AddRow(new string[] {
                        "Objective21"});
            table5.AddRow(new string[] {
                        "Objective22"});
#line 37
testRunner.Then("related objectives list contains only items with data", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Objectives list item name could contain special symbols")]
        public virtual void ObjectivesListItemNameCouldContainSpecialSymbols()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Objectives list item name could contain special symbols", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table6.AddRow(new string[] {
                        "~`!@#$%^&*()_+-={[]}:;\"\'|\\<,.>/?№ё",
                        "00000000000000000000000000000001"});
#line 43
testRunner.Given("objectives are present in database", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table7.AddRow(new string[] {
                        "~`!@#$%^&*()_+-={[]}:;\"\'|\\<,.>/?№ё",
                        "00000000000000000000000000000001"});
#line 46
testRunner.Given("objectives are linked to experiance \'Experience1\'", ((string)(null)), table7, "Given ");
#line 49
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title"});
            table8.AddRow(new string[] {
                        "~`!@#$%^&*()_+-={[]}:;\"\'|\\<,.>/?№ё"});
#line 50
testRunner.Then("related objectives list contains only items with data", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Actions open and select are enabled if hover item of objectives list")]
        [NUnit.Framework.CategoryAttribute("NotFirefox")]
        public virtual void ActionsOpenAndSelectAreEnabledIfHoverItemOfObjectivesList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Actions open and select are enabled if hover item of objectives list", new string[] {
                        "NotFirefox"});
#line 55
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table9.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table9.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
#line 56
testRunner.Given("objectives are present in database", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table10.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table10.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
#line 60
testRunner.Given("objectives are linked to experiance \'Experience1\'", ((string)(null)), table10, "Given ");
#line 64
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
testRunner.And("mouse hover element of related objectives list with title \'Objective11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
testRunner.Then("Action edit is enabled true for related objectives list item with title \'Objectiv" +
                    "e11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
testRunner.And("Action select is enabled true for related objectives list item with title \'Object" +
                    "ive11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No objectives are selected by default in related objectives list")]
        public virtual void NoObjectivesAreSelectedByDefaultInRelatedObjectivesList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No objectives are selected by default in related objectives list", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table11.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table11.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
            table11.AddRow(new string[] {
                        "Objective13",
                        "00000000000000000000000000000003"});
#line 70
testRunner.Given("objectives are present in database", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table12.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table12.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
            table12.AddRow(new string[] {
                        "Objective13",
                        "00000000000000000000000000000003"});
#line 75
testRunner.Given("objectives are linked to experiance \'Experience1\'", ((string)(null)), table12, "Given ");
#line 80
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
testRunner.Then("related objectives list item with title \'Objective12\' is not selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 82
testRunner.And("related objectives list item with title \'Objective11\' is not selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
testRunner.And("related objectives list item with title \'Objective13\' is not selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Build action is available by default")]
        public virtual void BuildActionIsAvailableByDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Build action is available by default", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 86
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
testRunner.Then("build action on experiance page is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Download and Rebuild actions becomes available after build")]
        public virtual void DownloadAndRebuildActionsBecomesAvailableAfterBuild()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Download and Rebuild actions becomes available after build", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table13.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
#line 90
testRunner.Given("objectives are present in database", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table14.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
#line 93
testRunner.Given("objectives are linked to experiance \'Experience1\'", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table15.AddRow(new string[] {
                        "Question11",
                        "00000000000000000000000000000001"});
#line 96
testRunner.Given("questions related to \'Objective11\' are present in database", ((string)(null)), table15, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Text",
                        "isCorrect"});
            table16.AddRow(new string[] {
                        "AnswerOption11",
                        "true"});
            table16.AddRow(new string[] {
                        "AnswerOption12",
                        "false"});
#line 99
testRunner.Given("answer options related to \'Question11\' of \'Objective11\' are present in database", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explanation"});
            table17.AddRow(new string[] {
                        "Explanation11"});
            table17.AddRow(new string[] {
                        "Explanation12"});
#line 103
testRunner.Given("explanations related to \'Question11\' of \'Objective11\' are present in database", ((string)(null)), table17, "Given ");
#line 107
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
testRunner.And("click on build button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
testRunner.Then("download action on experiance page is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
testRunner.And("rebuild action on experiance page is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Selected objective should be highlited after selecting")]
        public virtual void SelectedObjectiveShouldBeHighlitedAfterSelecting()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selected objective should be highlited after selecting", ((string[])(null)));
#line 112
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table18.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table18.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
            table18.AddRow(new string[] {
                        "Objective13",
                        "00000000000000000000000000000003"});
#line 113
testRunner.Given("objectives are present in database", ((string)(null)), table18, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table19.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table19.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
            table19.AddRow(new string[] {
                        "Objective13",
                        "00000000000000000000000000000003"});
#line 118
testRunner.Given("objectives are linked to experiance \'Experience1\'", ((string)(null)), table19, "Given ");
#line 123
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
testRunner.And("mouse hover element of related objectives list with title \'Objective12\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
testRunner.And("select related objective list item with title \'Objective12\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
testRunner.Then("related objectives list item with title \'Objective12\' is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 127
testRunner.But("related objectives list item with title \'Objective11\' is not selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 128
testRunner.And("related objectives list item with title \'Objective13\' is not selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Objective could be deselected")]
        public virtual void ObjectiveCouldBeDeselected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Objective could be deselected", ((string[])(null)));
#line 130
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table20.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table20.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
            table20.AddRow(new string[] {
                        "Objective13",
                        "00000000000000000000000000000003"});
#line 131
testRunner.Given("objectives are present in database", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table21.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table21.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
            table21.AddRow(new string[] {
                        "Objective13",
                        "00000000000000000000000000000003"});
#line 136
testRunner.Given("objectives are linked to experiance \'Experience1\'", ((string)(null)), table21, "Given ");
#line 141
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
testRunner.When("mouse hover element of related objectives list with title \'Objective11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
testRunner.And("select related objective list item with title \'Objective11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
testRunner.And("mouse hover element of related objectives list with title \'Objective12\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
testRunner.And("select related objective list item with title \'Objective12\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
testRunner.And("mouse hover element of related objectives list with title \'Objective13\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
testRunner.And("select related objective list item with title \'Objective13\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
testRunner.And("mouse hover element of related objectives list with title \'Objective11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
testRunner.And("select related objective list item with title \'Objective11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
testRunner.And("mouse hover element of related objectives list with title \'Objective12\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
testRunner.And("select related objective list item with title \'Objective12\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
testRunner.Then("related objectives list item with title \'Objective11\' is not selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
testRunner.And("related objectives list item with title \'Objective12\' is not selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
testRunner.And("related objectives list item with title \'Objective13\' is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All elements of related objectives list can be made visible using scroll")]
        public virtual void AllElementsOfRelatedObjectivesListCanBeMadeVisibleUsingScroll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All elements of related objectives list can be made visible using scroll", ((string[])(null)));
#line 156
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table22.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table22.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
            table22.AddRow(new string[] {
                        "Objective13",
                        "00000000000000000000000000000003"});
            table22.AddRow(new string[] {
                        "Objective14",
                        "00000000000000000000000000000004"});
            table22.AddRow(new string[] {
                        "Objective15",
                        "00000000000000000000000000000005"});
            table22.AddRow(new string[] {
                        "Objective16",
                        "00000000000000000000000000000006"});
#line 157
testRunner.Given("objectives are present in database", ((string)(null)), table22, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table23.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table23.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
            table23.AddRow(new string[] {
                        "Objective13",
                        "00000000000000000000000000000003"});
            table23.AddRow(new string[] {
                        "Objective14",
                        "00000000000000000000000000000004"});
            table23.AddRow(new string[] {
                        "Objective15",
                        "00000000000000000000000000000005"});
            table23.AddRow(new string[] {
                        "Objective16",
                        "00000000000000000000000000000006"});
#line 165
testRunner.Given("objectives are linked to experiance \'Experience1\'", ((string)(null)), table23, "Given ");
#line 173
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
testRunner.When("browser window width and height is set to 640 and 600", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
testRunner.And("scroll related objective with title \'Objective16\' into the view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
testRunner.Then("element of related objectives list with title \'Objective16\' is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Open action of related objectives list item navigates to objective\'s editing page" +
            "")]
        [NUnit.Framework.CategoryAttribute("NotFirefox")]
        public virtual void OpenActionOfRelatedObjectivesListItemNavigatesToObjectiveSEditingPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Open action of related objectives list item navigates to objective\'s editing page" +
                    "", new string[] {
                        "NotFirefox"});
#line 179
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table24.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
#line 180
testRunner.Given("objectives are present in database", ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table25.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
#line 183
testRunner.Given("objectives are linked to experiance \'Experience1\'", ((string)(null)), table25, "Given ");
#line 186
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 187
testRunner.When("mouse hover element of related objectives list with title \'Objective11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 188
testRunner.And("click open related objective list item with title \'Objective11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
testRunner.Then("browser navigates to url \'http://localhost:5656/#objective/0000000000000000000000" +
                    "0000000001?experienceId=00000000000000000000000000000001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Question count is shown for each related objective list item")]
        public virtual void QuestionCountIsShownForEachRelatedObjectiveListItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Question count is shown for each related objective list item", ((string[])(null)));
#line 191
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table26.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table26.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
#line 192
testRunner.Given("objectives are present in database", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table27.AddRow(new string[] {
                        "Objective11",
                        "00000000000000000000000000000001"});
            table27.AddRow(new string[] {
                        "Objective12",
                        "00000000000000000000000000000002"});
#line 196
testRunner.Given("objectives are linked to experiance \'Experience1\'", ((string)(null)), table27, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table28.AddRow(new string[] {
                        "Question11",
                        "00000000000000000000000000000001"});
            table28.AddRow(new string[] {
                        "Question12",
                        "00000000000000000000000000000002"});
#line 200
testRunner.Given("questions related to \'Objective11\' are present in database", ((string)(null)), table28, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Id"});
            table29.AddRow(new string[] {
                        "Question21",
                        "00000000000000000000000000000003"});
#line 204
testRunner.Given("questions related to \'Objective12\' are present in database", ((string)(null)), table29, "Given ");
#line 207
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 208
testRunner.Then("question count for related objective item with title \'Objective11\' is \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 209
testRunner.And("question count for related objective item with title \'Objective12\' is \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Back action of experience page navigates to experiences page")]
        public virtual void BackActionOfExperiencePageNavigatesToExperiencesPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Back action of experience page navigates to experiences page", ((string[])(null)));
#line 211
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 212
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 213
testRunner.And("click on back to experiences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
testRunner.Then("browser navigates to url \'http://localhost:5656/#experiences\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Next and previous actions of experience page navigate through experiences")]
        public virtual void NextAndPreviousActionsOfExperiencePageNavigateThroughExperiences()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Next and previous actions of experience page navigate through experiences", ((string[])(null)));
#line 216
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 217
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 218
testRunner.And("click on next experience", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
testRunner.Then("browser navigates to url \'http://localhost:5656/#experience/000000000000000000000" +
                    "00000000002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 220
testRunner.When("click on next experience", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 221
testRunner.Then("browser navigates to url \'http://localhost:5656/#experience/000000000000000000000" +
                    "00000000003\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 222
testRunner.When("click on previous experience", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
testRunner.Then("browser navigates to url \'http://localhost:5656/#experience/000000000000000000000" +
                    "00000000002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Previous experience action is not available for first experience")]
        public virtual void PreviousExperienceActionIsNotAvailableForFirstExperience()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Previous experience action is not available for first experience", ((string[])(null)));
#line 225
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 226
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 227
testRunner.Then("previous experience action is not available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Next experience action is not available for last experience")]
        public virtual void NextExperienceActionIsNotAvailableForLastExperience()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Next experience action is not available for last experience", ((string[])(null)));
#line 229
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 230
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0003\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 231
testRunner.Then("next experience action is not available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Building status is shown after click on build button on experience page")]
        public virtual void BuildingStatusIsShownAfterClickOnBuildButtonOnExperiencePage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Building status is shown after click on build button on experience page", ((string[])(null)));
#line 233
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 234
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 235
testRunner.And("click on build button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
testRunner.Then("status building is shown on experience page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Building status is shown after click on rebuild button on experience page")]
        public virtual void BuildingStatusIsShownAfterClickOnRebuildButtonOnExperiencePage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Building status is shown after click on rebuild button on experience page", ((string[])(null)));
#line 238
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 239
testRunner.When("open page by url \'http://localhost:5656/#/experience/0000000000000000000000000000" +
                    "0001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 240
testRunner.And("click on build button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
testRunner.Then("download action on experiance page is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 242
testRunner.And("rebuild action on experiance page is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
testRunner.When("click on rebuild button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 244
testRunner.Then("status building is shown on experience page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
